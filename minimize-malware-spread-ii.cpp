class Solution {
public:
    int bfs(int nc,vector<int>&init,unordered_map<int,vector<int>>&adj,int n)
    {
        vector<int>vis(n,false);
        queue<int>q;
        for(auto it:init)
        {
            if(it!=nc)
            {
                q.push(it);
                vis[it] = true;
            }
        }
        while(!q.empty())
        {
            int top = q.front();
            q.pop();

            for(auto it:adj[top])
            {
                if(!vis[it] && it!=nc)
                {
                    q.push(it);
                    vis[it] = true;
                }
            }
        }
        int count = 0;
        for(auto it:vis)
        {
            if(it)
            count++;
        }
        return count;
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        unordered_map<int,vector<int>>adj;
        sort(initial.begin(),initial.end());
        for(int i = 0;i<n;i++)
        {
            for(int j = 0;j<n;j++)
            {
                if(graph[i][j])
                {
                    adj[i].push_back(j);
                }
            }
        }
        int ans = INT_MAX;
        for(int i = 0;i<initial.size();i++)
        {
            int x = bfs(initial[i],initial,adj,n);
            ans = min(ans,x);
        }
        for(int i = 0;i<initial.size();i++)
        {
            int x = bfs(initial[i],initial,adj,n);
            if(x==ans)
            {
                return initial[i];
            }
        }
        return -1;
    }

};